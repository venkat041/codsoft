# -*- coding: utf-8 -*-
"""movie prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tT23-uhBVYhNbcL9O2mWv5PGcv1Po1KZ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.impute import SimpleImputer
# Load the dataset (Assume CSV file is provided)
# Specify the encoding as 'latin-1' or 'ISO-8859-1'
data = pd.read_csv('/content/IMDb Movies India.csv', encoding='latin-1')  # Replace with the actual path to your dataset
print(data.head())  # Check the first few rows of the dataset
# Handle missing values for categorical features (e.g., fill with 'Unknown')
data['Genre'] = data['Genre'].fillna('Unknown')
data['Director'] = data['Director'].fillna('Unknown')
data['Actor 1'] = data['Actor 1'].fillna('Unknown')
data['Actor 2'] = data['Actor 2'].fillna('Unknown')
data['Actor 3'] = data['Actor 3'].fillna('Unknown')
data['Rating'] = data['Rating'].fillna(data['Rating'].median())  # Impute missing Rating with median

# Check for any remaining missing values
print(data.isnull().sum())
# Select features (X) and target variable (y)
X = data[['Genre', 'Director', 'Actor 1', 'Actor 2', 'Actor 3']]  # Using categorical columns as features
y = data['Rating']  # Rating is the target variable
# Split the data into training and testing sets (80-20 split)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Create a column transformer for one-hot encoding the categorical features
preprocessor = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(handle_unknown='ignore'), ['Genre', 'Director', 'Actor 1', 'Actor 2', 'Actor 3'])
    ])

# Create a pipeline with preprocessing and a regression model
model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', LinearRegression())
])

# Train the model on the training data
model.fit(X_train, y_train)
# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Optionally, plot the predicted vs actual ratings
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Ratings')
plt.ylabel('Predicted Ratings')
plt.title('Actual vs Predicted Ratings')
plt.show()
# Example: Predicting ratings for new movies
new_movies = pd.DataFrame({
    'Genre': ['Action', 'Comedy'],
    'Director': ['Director1', 'Director2'],
    'Actor 1': ['Actor1', 'Actor2'],
    'Actor 2': ['Actor3', 'Actor4'],
    'Actor 3': ['Actor5', 'Actor6']
})

# Predict the ratings for the new movies
new_predictions = model.predict(new_movies)
print(new_predictions)